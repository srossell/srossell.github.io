<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Abstractions and musings - tips</title><link href="/" rel="alternate"></link><link href="/feeds/tips.atom.xml" rel="self"></link><id>/</id><updated>2020-09-09T00:00:00+02:00</updated><entry><title>Connecting to a remote jupyter notebook instance</title><link href="/connect_remote_jupyter.html" rel="alternate"></link><published>2020-09-09T00:00:00+02:00</published><updated>2020-09-09T00:00:00+02:00</updated><author><name>Sergio Rossell</name></author><id>tag:None,2020-09-09:/connect_remote_jupyter.html</id><summary type="html">&lt;p&gt;How to connect to a jupyter instance running on are remote server.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Connecting to a remote jupyter instance.&lt;/h2&gt;
&lt;p&gt;These instructions work for both "jupyter notebook" and "jupyter-lab". For the
latter, replace "jupyter notebook" by jupyter-lab.&lt;/p&gt;
&lt;h3&gt;On the server&lt;/h3&gt;
&lt;p&gt;Imagine you are using port 6666.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jupyter notebook --no-browser --port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6666&lt;/span&gt; --NotebookApp.token&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mytoken&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;On the client side&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -f user@my.server.here -L &lt;span class="m"&gt;6666&lt;/span&gt;:localhost:6666 -N
&lt;/pre&gt;&lt;/div&gt;</content><category term="tips"></category><category term="jupyter"></category></entry><entry><title>Installing a jupyter kernel</title><link href="/install_jupyter_kernel.html" rel="alternate"></link><published>2020-09-09T00:00:00+02:00</published><updated>2020-09-09T00:00:00+02:00</updated><author><name>Sergio Rossell</name></author><id>tag:None,2020-09-09:/install_jupyter_kernel.html</id><summary type="html">&lt;p&gt;How to install a jupyter kernel.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Installing a jupyter kernel.&lt;/h2&gt;
&lt;p&gt;Imagine "main" is the name of your environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m ipykernel install --user --name main --display-name &lt;span class="s2"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the display name can be different than the enviroment name (in the
example they are both "main").&lt;/p&gt;</content><category term="tips"></category><category term="jupyter"></category></entry><entry><title>Installing cmdstan</title><link href="/installing-cmdstan.html" rel="alternate"></link><published>2020-09-08T00:00:00+02:00</published><updated>2020-09-08T00:00:00+02:00</updated><author><name>Sergio Rossell</name></author><id>tag:None,2020-09-08:/installing-cmdstan.html</id><summary type="html">&lt;p&gt;Instructions for installing command Stan within a conda environment.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Installing command Stan within a conda environmnet.&lt;/h2&gt;
&lt;p&gt;First create (or activate) a conda enviroment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda activate myenv
conda install gcc_linux-64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Clone the git repository (in a path of your choice)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/stan-dev/cmdstan.git

&lt;span class="nb"&gt;cd&lt;/span&gt; cmdstan

git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Typing "make" shows a set of instructions&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I used (on a big server)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make build -j10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can check if you can compile and run the bernulli model, following the
instructions you get when you type "make".&lt;/p&gt;</content><category term="tips"></category><category term="stan"></category></entry><entry><title>Pelican github pages workflow</title><link href="/pelican-github-workflow.html" rel="alternate"></link><published>2019-12-21T00:00:00+01:00</published><updated>2019-12-21T00:00:00+01:00</updated><author><name>Sergio Rossell</name></author><id>tag:None,2019-12-21:/pelican-github-workflow.html</id><summary type="html">&lt;p&gt;Building a website using pelican, and then deploying it in github pages.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Building an deploying a website with Pelican and github.&lt;/h2&gt;
&lt;p&gt;This is short description of how I deployed this website using pelican and
githubpages.&lt;/p&gt;
&lt;p&gt;The theme of this page is a modification of Claudio Walser's &lt;a href="https://github.com/claudio-walser/pelican-fh5co-marble"&gt;fh5co
theme&lt;/a&gt;. The workflow is
modified from a workflow by Joel Zeldes at
&lt;a href="http://anotherdatum.com/pelican-and-github-pages-workflow.html"&gt;anotherdatum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First create a repository with a &lt;code&gt;master&lt;/code&gt; and a &lt;code&gt;source&lt;/code&gt; branch. In teh
&lt;code&gt;source&lt;/code&gt; branch is where you will develop your pelican website. The &lt;code&gt;master&lt;/code&gt;
branch is used for publishing the site.&lt;/p&gt;
&lt;p&gt;You'll need to create a folder in &lt;code&gt;.git/hooks/pre-push&lt;/code&gt; with the follwing
content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; local_ref local_sha remote_ref remote_sha
&lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$remote_ref&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;refs/heads/source&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pushing output folder (production version) to master...&amp;#39;&lt;/span&gt;
                pelican content -o output -s publishconf.py
                ghp-import --branch&lt;span class="o"&gt;=&lt;/span&gt;master output
                git push --force git@github.com:srossell/srossell.github.io.git master
                pelican content -o output
        &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get the workflow to work in my case, I added the &lt;code&gt;--branch=master&lt;/code&gt; option
for &lt;code&gt;ghp-import&lt;/code&gt; and pushed to &lt;code&gt;master&lt;/code&gt;. Also, I had to create an ssh key. I
also added the &lt;code&gt;--force&lt;/code&gt; option to git push.&lt;/p&gt;</content><category term="tips"></category><category term="github"></category></entry></feed>